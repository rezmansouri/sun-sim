#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 15 15:04:27 2023.

@author: ghiggi
"""
import matplotlib.pyplot as plt

#### Continuous metrics
metrics = {
    "BIAS": "Absolute Bias",
    "robBIAS": "Absolute Robust Bias",
    "relBIAS": "Relative Bias",
    "relrobBIAS": "Relative Robust Bias",
    "MAE": "Mean Absolute Error",
    "robMAE": "Median Absolute Error",
    "relMAE": "Relative Mean Absolute Error",
    "relrobMAE": "Relative Median Absolute Error",
    "MSE": "Mean Squared Error",
    "robMSE": "Median Squared Error",
    "relMSE": "Relative Mean Squared Error",
    "relrobMSE": "Relative Median Squared Error",
    "RMSE": "Root Mean Squared Error",
    "R": "Pearson Correlation (R)",
    "R2": "Coefficient of Determination (R2)",
    "beta_pred": "Slope pred. vs obs.",
    "beta_obs": "Slope obs. vs pred.",
    "rMean": "Mean Ratio",
    "rMedian": "Median Ratio",
    "diffMean": "Difference in Mean",
    "diffMedian": "Difference in Median",
    "err_SD": "Standard Deviation of the error",
    "err_MAD": "Median Absolute Deviation of the error",
    "err_IQR": "Interquartile range of the error",
    "SCAT_16_84": "Distance between the 16th and 84th quantiles of the error distribution",
    "SCAT_25_75": "Distance between the 25th and 75th quantiles of the error distribution",
    "diffSD": "Difference in Standard Deviations",
    "diffMAD": "Difference in Median Absolute Deviations",
    "rSD": "Ratio of Standard Deviations",
    "rMAD": "Ratio of Median Absolute Deviations",
    "diffCoV": "Difference in Coefficient of Variability",
    "diff_robCoV": "Difference in Robust Coefficient of Variability",
    "rCoV": "Ratio of Coefficient of Variability",
    "r_robCoV": "Ratio of Robust Coefficient of Variability",
    "NSE": "Nash Sutcliffe Efficiency (NSE)",
    "KGE": "Kling-Gupta Efficiency (KGE)",
    "err_AC1": "Autocorrelation at Lag 1 of the error",
}


# - Color limits settings
clim_dict = {
    # "BIAS" : [-2,2],
    # "robBIAS" : [-2,2],
    # "relBIAS" : [-1,1],
    # "relrobBIAS" : [-1,1],
    # "MAE" : [0,1],
    # "robMAE" : [0,1],
    # "relMAE" : [0,1],
    # "relrobMAE" : [0,1],
    # "MSE" : [0,1],
    # "robMSE" : [0,1],
    # "relMSE" : [0,1],
    # "relrobMSE" : [0,1],
    # "RMSE" : [0,1],
    "R": [-1, 1],
    "R2": [0, 1],
    "beta_pred": [0.5, 1.5],
    "beta_obs": [0.5, 1.5],
    "rMean": [0.5, 1.5],
    "rMedian": [0.5, 1.5],
    # "diffMean" : [-2, 2],
    # "diffMedian" : [-2, 2],
    # "err_SD" : [0,2],
    # "err_MAD" : [0,2],
    # "err_IQR" : [0,2],
    "SCATTER": [0, 2],
    # "diffSD" : [-2,2],
    # "diffMAD" : [-2,2],
    "rSD": [0.5, 1.5],
    "rMAD": [0.5, 1.5],
    "diffCoV": [-2, 2],
    "diff_robCoV": [-2, 2],
    "rCoV": [0.5, 1.5],
    "r_robCoV": [0.5, 1.5],
    "NSE": [0, 1],
    "KGE": [0, 1],
    "err_AC1": [-1, 1],
}

# - Color palette settings
cmap_dict = {
    "BIAS": plt.get_cmap("BrBG"),
    "robBIAS": plt.get_cmap("BrBG"),
    "relBIAS": plt.get_cmap("BrBG"),
    "relrobBIAS": plt.get_cmap("BrBG"),
    "MAE": plt.get_cmap("RdYlBu_r"),
    "robMAE": plt.get_cmap("RdYlBu_r"),
    "relMAE": plt.get_cmap("RdYlBu_r"),
    "relrobMAE": plt.get_cmap("RdYlBu_r"),
    "MSE": plt.get_cmap("RdYlBu_r"),
    "robMSE": plt.get_cmap("RdYlBu_r"),
    "relMSE": plt.get_cmap("RdYlBu_r"),
    "relrobMSE": plt.get_cmap("RdYlBu_r"),
    "RMSE": plt.get_cmap("RdYlBu_r"),
    "R": plt.get_cmap("RdYlBu"),
    "R2": plt.get_cmap("RdYlBu"),
    "beta_pred": plt.get_cmap("BrBG_r"),
    "beta_obs": plt.get_cmap("BrBG_r"),
    "rMean": plt.get_cmap("BrBG"),
    "rMedian": plt.get_cmap("BrBG"),
    "diffMean": plt.get_cmap("BrBG"),
    "diffMedian": plt.get_cmap("BrBG"),
    "err_SD": plt.get_cmap("PuRd"),
    "err_MAD": plt.get_cmap("PuRd"),
    "err_IQR": plt.get_cmap("PuRd"),
    "SCAT_16_84": plt.get_cmap("PuRd"),
    "SCAT_25_75": plt.get_cmap("PuRd"),
    "diffSD": plt.get_cmap("PuOr"),
    "diffMAD": plt.get_cmap("PuOr"),
    "rSD": plt.get_cmap("PuOr"),
    "rMAD": plt.get_cmap("PuOr"),
    "diffCoV": plt.get_cmap("PiYG"),
    "diff_robCoV": plt.get_cmap("PiYG"),
    "rCoV": plt.get_cmap("PiYG"),
    "r_robCoV": plt.get_cmap("PiYG"),
    "NSE": plt.get_cmap("RdYlBu"),
    "KGE": plt.get_cmap("RdYlBu"),
    "err_AC1": plt.get_cmap("YlOrRd"),
}

# - Triangle settings ####
cbar_dict = {
    "BIAS": "both",
    "robBIAS": "both",
    "relBIAS": "both",
    "relrobBIAS": "both",
    "MAE": "max",
    "robMAE": "max",
    "relMAE": "max",
    "relrobMAE": "max",
    "MSE": "max",
    "robMSE": "max",
    "relMSE": "max",
    "relrobMSE": "max",
    "RMSE": "max",
    "R": "neither",
    "R2": "neither",
    "beta_pred": "both",
    "beta_obs": "both",
    "rMean": "both",
    "rMedian": "both",
    "diffMean": "both",
    "diffMedian": "both",
    "err_SD": "max",
    "err_MAD": "max",
    "err_IQR": "max",
    "SCAT_16_84": "max",
    "SCAT_25_75": "max",
    "diffSD": "both",
    "diffMAD": "both",
    "rSD": "both",
    "rMAD": "both",
    "diffCoV": "both",
    "diff_robCoV": "both",
    "rCoV": "both",
    "r_robCoV": "both",
    "NSE": "min",
    "KGE": "min",
    "err_AC1": "neither",
}


####  Categorical binary metrics
labels_dict = {
    "POD": "Probability of Detection",
    "POFD": "Probability of False Detection",
    "PFR": "Probability of False Rejection",
    "POR": "Probability of Rejection",
    "SR": " Success Ratio",
    "FAR": "False Alarm Ratio",
    "MISSR": "Miss Ratio",
    "CRR": "Correct Rejection Ratio",
    "OA": "Overall Accuracy",
    "F1": "F1 Score",
    "J": "Jaccard Index",
    "MCC": "Matthews Correlation Coefficient",
    "Informedness": "Informedness",
    "Markedness": "Markedness",
    "fBIAS": "Frequency BIAS",
    "CSI": "Critical Success Index",
    "ETS": "Equitable Threat Score",
    "HK": "Hansen-Kuipers Discriminant",
    "HSS": "Heidke Skill Score",
    "OR": "Odds Ratio",
    "LOR": "Log Odds Ratio",
    "ORSS": "Odds Ratio Skill Score",
    "EDS": "Extreme Dependency Score",
    "SEDS": "Symmetric Extreme Dependency Score",
    "EDI": "Extreme Dependency Index",
    "SEDI": "Symmetric Extreme Dependency Index",
}

# - Color limits settings
clim_dict = {
    "POD": [0, 1],
    "POFD": [0, 1],
    "POR": [0, 1],
    "PFR": [0, 1],
    "FAR": [0, 1],
    "SR": [0, 1],
    "CRR": [0, 1],
    "MISSR": [0, 1],
    "OA": [0, 1],
    "F1": [0, 1],
    "J": [0, 1],
    "MCC": [0, 1],
    "Informedness": [-1, 1],
    "Markedness": [-1, 1],
    "fBIAS": [0.4, 1.6],
    "CSI": [0, 1],
    "ETS": [0, 1],
    "HK": [0, 1],
    "HSS": [0, 1],
    "OR": [0, 1000],
    "LOR": [-1000, 1000],
    "ORSS": [0, 1],
    "EDS": [0, 1],
    "SEDS": [0, 1],
    "EDI": [0, 1],
    "SEDI": [0, 1],
}

# - Color palette settings
cmap_dict = {
    "POD": plt.get_cmap("RdYlBu"),
    "POFD": plt.get_cmap("RdYlBu"),
    "POR": plt.get_cmap("RdYlBu"),
    "PFR": plt.get_cmap("RdYlBu"),
    "FAR": plt.get_cmap("RdYlBu"),
    "SR": plt.get_cmap("RdYlBu"),
    "CRR": plt.get_cmap("RdYlBu"),
    "MISSR": plt.get_cmap("RdYlBu"),
    "OA": plt.get_cmap("RdYlBu"),
    "F1": plt.get_cmap("RdYlBu"),
    "J": plt.get_cmap("RdYlBu"),
    "MCC": plt.get_cmap("RdYlBu"),
    "Informedness": plt.get_cmap("RdYlBu"),
    "Markedness": plt.get_cmap("RdYlBu"),
    "fBIAS": plt.get_cmap("Spectral"),
    "CSI": plt.get_cmap("RdYlBu"),
    "ETS": plt.get_cmap("RdYlBu"),
    "HK": plt.get_cmap("RdYlBu"),
    "HSS": plt.get_cmap("RdYlBu"),
    "OR": plt.get_cmap("RdYlBu"),
    "LOR": plt.get_cmap("RdYlBu"),
    "ORSS": plt.get_cmap("RdYlBu"),
    "EDS": plt.get_cmap("RdYlBu"),
    "SEDS": plt.get_cmap("RdYlBu"),
    "EDI": plt.get_cmap("RdYlBu"),
    "SEDI": plt.get_cmap("RdYlBu"),
}


# - Colorbar triangles settings
cbar_dict = {
    "POD": "neither",
    "POFD": "neither",
    "POR": "neither",
    "PFR": "neither",
    "FAR": "neither",
    "SR": "neither",
    "CRR": "neither",
    "MISSR": "neither",
    "OA": "neither",
    "F1": "neither",
    "J": "neither",
    "MCC": "min",
    "Informedness": "both",
    "Markedness": "both",
    "fBIAS": "both",
    "CSI": "neither",
    "ETS": "min",
    "HK": "min",
    "HSS": "min",
    "OR": "both",
    "LOR": "both",
    "ORSS": "min",
    "EDS": "min",
    "SEDS": "min",
    "EDI": "min",
    "SEDI": "min",
}
