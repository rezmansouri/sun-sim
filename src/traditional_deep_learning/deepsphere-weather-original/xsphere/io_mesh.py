#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec  6 12:56:36 2022

@author: ghiggi
"""
import os
import numpy as np
import xarray as xr

# -----------------------------------------------------------------------------.
############################
### MPAS & ECMWF grids  ####
############################


def create_ECMWF_atlas_mesh(ECMWF_grid_name, ECMWF_atlas_mesh_dir):
    """
    Generate ECMWF grids using (pre-installed) atlas-meshgen.

    Parameters
    ----------
    ECMWF_grid_name : str
        ECWMF grid name. Example: N320, O640, F1280.
    ECMWF_atlas_mesh_dir : str
        Directory where to save the atlas generated mesh.

    """
    atlas_mesh_fname = "".join([ECMWF_grid_name, ".msh"])
    atlas_mesh_fpath = os.path.join(ECMWF_atlas_mesh_dir, atlas_mesh_fname)
    cmd = "".join(
        [
            "atlas-meshgen ",
            ECMWF_grid_name,
            " ",
            atlas_mesh_fpath,
            " ",
            "--lonlat --generator=delaunay",
        ]
    )
    out = os.system(cmd)
    return out


##----------------------------------------------------------------------------.
def read_ECMWF_atlas_msh(fpath):
    """
    Read the ECMWF Gaussian Grid Specification .msh file generated by atlas-meshgen.

    More info at:
    - https://sites.ecmwf.int/docs/atlas/
    - https://github.com/ecmwf/atlas

    Parameters
    ----------
    fpath : str
        Filepath of a ECWMF 2D Mesh Specification .msh file generated by atlas-meshgen.

    Returns
    -------
    lon : numpy.ndarray
        The longitude center of each grid cell.
    lat : numpy.ndarray
       The latitude center of each grid cell.
    list_polygons_latlon : list
       List of numpy.ndarray vertex coordinates with dimension (n_vertex, 2)
    """
    ##-------------------------------------------------------------------------.
    ## msh file format
    # ...
    # $Nodes
    # 23112
    # 1 0 88.9277 0
    # 20 342 88.9277 0
    # ...
    # $EndNodes
    # $Elements
    # 30454
    # 1 3 4 1 1 1 0 966 1086 1087 967 # 4 vertex
    # id 3 4 1 1 1 0 967 1087 1088 968
    # 15767 2 4 1 1 1 0 1 21 22   # 3 vertex
    # 15768 2 4 1 1 1 0 1 22 2
    # $EndElements
    ##-------------------------------------------------------------------------.
    # f = open(fpath)
    with open(fpath) as f:
        if f.readline() != "$MeshFormat\n":
            raise ValueError("Not the expected .msh file format")
        # Dummy lines
        f.readline()  # '2.2 0 8\n'
        f.readline()  # '$EndMeshFormat\n'
        f.readline()  # '$Nodes\n'
        # Retrieve number of cells
        n_cells = int(f.readline().rstrip())  # '23240\n'
        # Initialize lat_vertex_dict, lon_vertex_dict
        lat_cells_dict = {}
        lon_cells_dict = {}
        ##---------------------------------------------------------------------.
        # Retrieve lon lat index of each cell
        for _ in range(n_cells):
            tmp = f.readline()  # '1 0 88.9277 0\n'
            tmp_split = tmp.split(" ")  # ['1', '0', '88.9277', '0\n']
            lon_cells_dict[tmp_split[0]] = float(tmp_split[1])
            lat_cells_dict[tmp_split[0]] = float(tmp_split[2])
        # Dummy lines
        f.readline()  # '$EndNodes\n'
        f.readline()  # '$Elements\n'
        ##---------------------------------------------------------------------.
        # Retrieve cell neighbors of each vertex
        n_vertex = int(f.readline().rstrip())  # '30418\n'
        vertex_cells_dict = {}
        for _ in range(n_vertex):
            tmp = f.readline()  # '1 3 4 1 1 1 0 966 1086 1087 967\n'
            tmp = tmp.rstrip()  # remove \n
            tmp_split = tmp.split(
                " "
            )  # ['1', '3', '4', '1', '1', '1', '0', '966', '1086', '1087', '967']
            tmp_id_vertex = tmp_split[7:]
            vertex_cells_dict[tmp_split[0]] = tmp_id_vertex
        ##---------------------------------------------------------------------.
        # Dummy line
        if f.readline() != "$EndElements\n":
            raise ValueError("Something went wrong in parsing the .msh file")
    ##-------------------------------------------------------------------------.
    # Retrieve lon, lat arrays
    lon = np.array(list(lon_cells_dict.values()))
    lat = np.array(list(lat_cells_dict.values()))
    ##-------------------------------------------------------------------------.
    # Retrieve list of mesh polygons (based on $Elements indexing)
    n_vertex = len(vertex_cells_dict.keys())
    list_polygons_latlon = []
    for i, cellIDs in enumerate(vertex_cells_dict.values()):
        # Retrieve lon lat of neigbor nodes
        tmp_lats = [lat_cells_dict[i] for i in cellIDs]
        tmp_lons = [lon_cells_dict[i] for i in cellIDs]
        tmp_lonlat = np.column_stack((tmp_lons, tmp_lats))
        list_polygons_latlon.append(tmp_lonlat)
    ##-------------------------------------------------------------------------.
    return (lon, lat, list_polygons_latlon)


###---------------------------------------------------------------------------.
def read_MPAS_mesh(fpath):
    """
    Read the MPAS Mesh Specification netCDF4 file and returns grid centers and corners.

    MPAS meshes can be downloaded at https://mpas-dev.github.io/atmosphere/atmosphere_meshes.html .

    Parameters
    ----------
    fpath : str
        Filepath of a MPAS Mesh Specification netCDF4 file

    Returns
    -------
    lon : numpy.ndarray
        The longitude center of each grid cell.
    lat : numpy.ndarray
       The latitude center of each grid cell.
    lon_bnds : numpy.ndarray
        The longitudes of the corners of each grid cell.
    lat_bnds : numpy.ndarray
        The latitudes of the corners of each grid cell.

    """
    ds = xr.load_dataset(fpath)
    ## Dataset Summary
    # ds.latCell  # in radians
    # ds.lonCell  # in radians
    # ds.latVertex.shape
    # ds.lonVertex.shape
    ## verticesOnCell contains 0 when not 6 vertices
    # - shape: ncells x vertices_idx
    # idxs, counts = np.unique(ds.verticesOnCell.values, return_counts=True)
    # counts
    ##-------------------------------------------------------------------------.
    # Convert cell centers to degrees
    lat = ds.latCell.values * 180 / np.pi
    lon = ds.lonCell.values * 180 / np.pi
    ##------------------------------------------------------------------------.
    # Preprocess indexes for cells with less than X vertices
    idx_vertices = ds.verticesOnCell.values
    # Drop columns with only 0
    idx_vertices = idx_vertices[:, idx_vertices.sum(axis=0) != 0]
    # - Replace 0 with idx of previous vertex
    row_idx, col_idx = np.where(idx_vertices == 0)
    for i in range(len(col_idx)):
        idx_vertices[row_idx[i], col_idx[i]] = idx_vertices[row_idx[i], col_idx[i] - 1]
    # Subtract 1 for python index based on 0
    idx_vertices = idx_vertices - 1
    # Retrieve lat lon of vertices
    lat_bnds = ds.latVertex.values[idx_vertices] * 180 / np.pi
    lon_bnds = ds.lonVertex.values[idx_vertices] * 180 / np.pi
    ##------------------------------------------------------------------------.
    return (lon, lat, lon_bnds, lat_bnds)
